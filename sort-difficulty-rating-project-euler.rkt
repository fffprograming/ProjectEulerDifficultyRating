#lang racket
(define ProblemCount 760)
(define (read-n)
  (define (sub i)
    (if (> i ProblemCount) '()
        (let* ((difficulty (read))
               (l (list i difficulty)))
          (cons l (sub (+ i 1))))))
  (sub 1))
(define rate< (lambda (l1 l2)
                (let* ((index1 (first l1))
                       (rate1 (second l1))
                       (index2 (first l2))
                       (rate2 (second l2))
                       (val1 (+ (* ProblemCount rate1) index1))
                       (val2 (+ (* ProblemCount rate2) index2)))
                  (< val1 val2))))
(define (printer)
  (define (sub borderrate ll)
    (if (null? ll) (newline)
        (let* ((nowele (car ll))
               (nowind (first nowele))
               (nowrate (second nowele)))
          (if (> nowrate borderrate)
              (begin
                (display "* Difficulty rating = ")(display nowrate)(newline)
                (sub nowrate ll))
              (begin
                (display "ãƒ»[https://odz.sakura.ne.jp/projecteuler/?Problem+")(display nowind)(display ":title= Problem ")(display nowind)(display "]")(newline)
                (sub borderrate (cdr ll)))))))
  (sub 0 (sort (read-n) rate<)))
(printer)